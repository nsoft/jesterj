import java.text.SimpleDateFormat

/*
 * Copyright 2013-2018 Needham Software LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    maven {
      url 'https://jesterj.jfrog.io/jesterj/libs-release/'
    }
  }
  dependencies {
    //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'jacoco'
  id 'signing'
//  id 'maven'
  id 'maven-publish'
  id 'com.github.jk1.dependency-license-report' version '0.3.4'
  id "com.github.onslip.gradle-one-jar" version "1.0.5"
  id 'com.needhamsoftware.unojar' version '1.0.1'
}

allprojects {
  apply plugin: "com.jfrog.artifactory"
}

artifactory {
  contextUrl = "https://jesterj.jfrog.io/jesterj"   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    repository {
      repoKey = 'libs-snapshot-local'
      /*

        System env var is for Travis CI, add these to gradle.properties for local builds

        jj_artifactory_user=anonymous
        jj_artifactory_password=

        Note that anonymous user will not be able to test out new versions of libraries. Use mavenLocal() for that.

       */
      username = project.hasProperty("jj_artifactory_user") ? project.getProperty("jj_artifactory_user") : System.env.ARTIFACTORY_USER
      password = project.hasProperty("jj_artifactory_password") ? project.getProperty("jj_artifactory_password") : System.env.ARTIFACTORY_PASSWORD
      maven = true

    }
    defaults {
      publications('mavenJava')
      publishArtifacts = true
      publishPom = true
    }
  }
  resolve {
    repository {
      repoKey = 'libs-release'
      username = project.hasProperty("jj_artifactory_user") ? project.getProperty("jj_artifactory_user") : System.env.ARTIFACTORY_USER
      password = project.hasProperty("jj_artifactory_password") ? project.getProperty("jj_artifactory_password") : System.env.ARTIFACTORY_PASSWORD
      maven = true

    }
  }
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

licenseReport {
  excludeGroups = ['jini']
}

repositories {
  mavenLocal()
  maven {
    url 'https://clojars.org/repo'
  }
  maven {
//    credentials {
//      username = propOrDefault("jj_artifactory_user", System.env.ARTIFACTORY_USER)
//      password = propOrDefault("jj_artifactory_password", System.env.ARTIFACTORY_PASSWORD)
//    }
    url 'https://jesterj.jfrog.io/jesterj/libs-release/'
  }

}

configurations {
  unoJarPack
  // under no circumstances shall we distribute these in our archives
  unoJarPack.exclude group: 'junit'               // test lib
  unoJarPack.exclude group: 'org.easymock'        // test lib
  // Conflicting licenses...
  unoJarPack.exclude group: 'org.jboss.logging'
  unoJarPack.exclude group: 'com.google.code.findbugs', module: 'annotations' // N.B. findbugs jsr305 is ok, thus module
  unoJarPack.exclude group: 'c3p0', module: 'c3p0'
  unoJarPack.extendsFrom implementation
}

configurations.all {
  resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
  resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

//////////////////////////

 version = '1.0-SNAPSHOT'
 group = 'org.jesterj'

//////////////////////////


dependencies {
  implementation 'com.needhamsoftware.unojar:core:1.0.2'
  implementation 'io.github.classgraph:classgraph:4.8.78'
  implementation 'org.apache.tika:tika-parsers:1.23'
  implementation 'com.mchange:c3p0:0.9.5.2' // for tika deps... actual declared dep includes older LGPL version only.

  implementation 'org.apache.solr:solr-core:8.5.0'

  implementation 'com.google.guava:guava:18.0'
  implementation 'com.google.code.findbugs:jsr305:3.0.0'

  implementation 'jini:jini-core:2.1'
  implementation 'org.apache.river:reggie:2.2.2'
  implementation 'org.apache.cassandra:cassandra-all:4.0.0'
  implementation 'com.datastax.oss:java-driver-core:4.14.1'
  implementation 'org.yaml:snakeyaml:1.14'
  implementation 'org.apache.velocity:velocity:1.7'

  // this is driven by the Solr dep, but we need to make explicit the bridge libs
  implementation 'org.apache.logging.log4j:log4j-core:2.13.0'
  implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.0'
  implementation 'org.apache.logging.log4j:log4j-jcl:2.13.0'
  implementation 'org.apache.logging.log4j:log4j-1.2-api:2.13.0'
  implementation 'org.apache.logging.log4j:log4j-jul:2.13.0'

  implementation('com.needhamsoftware:easier-mock:2.0')
  implementation('org.objenesis:objenesis:3.1')
  implementation 'net.jini:jsk-platform:2.2.2'
  implementation 'com.offbytwo:docopt:0.6.0.20150202'
  implementation 'guru.nidi:graphviz-java:0.16.0'
  implementation 'com.fasterxml:aalto-xml:1.1.1'
  implementation 'xml-resolver:xml-resolver:1.2'
  testImplementation 'junit:junit:4.11'
  implementation 'org.easymock:easymock:4.1'
  testImplementation 'org.hsqldb:hsqldb:2.6.0'
  testImplementation ('com.needhamsoftware:easier-mock:2.0') {
    exclude group:'org.easymock'
  }
  //runtime ':one-jar-boot:0.98' // uncomment for debugging stack traces into one-jar classes

  implementation 'org.javassist:javassist:3.20.0-GA' // substitute a version that handles java 8

  // this shouldn't be necessary but there's something dodgy going on with jacocoTestReport's classpath
  // using testImplementation so we don't package these...
  testImplementation (group: 'org.jacoco', name:'org.jacoco.report', version:'0.7.7.201606060606')
  testImplementation (group: 'org.jacoco', name:'org.jacoco.core', version:'0.7.7.201606060606')
  testImplementation 'org.apache.solr:solr-test-framework:8.5.0'
}

compileJava {
  options.compilerArgs += ["--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED"]
}

javadoc {
  options.optionFiles << file('javadoc.options')
}

// these are just support classes for the Trie Tests swiped from commons/collections
// they don't actually have test methods which causes Junit to complain. Just don't run them.
test {
  maxHeapSize = "4g"
  //maxParallelForks = 6
  exclude '**/Abstract*.class', '**/BulkTest.class'
  forkEvery 1 // temp until we can get FTI tests moved into a separate target.
  systemProperty "java.security.egd", "file:/dev/./urandom"
  systemProperty "jj.log.dir", "build"
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }

  doFirst {
    jvmArgs += [
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.util.jar=ALL-UNNAMED',
        '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED'
    ]
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
  jacocoClasspath += files {configurations.testCompile.resolve()}
}

jar {
  archiveFileName = 'jesterj-ingest-'+project.version+'.jar'
  into("META-INF/maven/$project.group/$project.name") {
    from { generatePomFileForMavenJavaPublication }
    rename ".*", "pom.xml"
  }
}

def unoJardest = 'build/libs/jesterj-node-' + project.version + '.jar'

unojar {
  unoJar unoJardest
  appMainClass 'org.jesterj.ingest.Main'
  manifestAttrs(
      // exports/opens for cassandra
      'Add-Exports': 'java.base/jdk.internal.misc java.base/jdk.internal.ref java.base/sun.nio.ch' +
          ' java.management.rmi/com.sun.jmx.remote.internal.rmi java.rmi/sun.rmi.registry' +
          ' java.rmi/sun.rmi.server java.sql/java.sql',
      // this is not part of the jar standard, but I expect to support it in UnoJar
      'Add-Opens' : 'java.base/java.lang.module java.base/jdk.internal.loader java.base/jdk.internal.ref' +
          ' java.base/jdk.internal.reflect java.base/jdk.internal.math java.base/jdk.internal.module ' +
          ' java.base/jdk.internal.util.jar jdk.management/com.sun.management.internal'
  )
  appFiles {
    fileset(dir:"$projectDir/build/classes/java/main/") {
      include( name: '**/**' )
    }
    fileset(dir:"$projectDir/build/resources/main/") {
      include( name: '**/**' )
    }
  }
  depLibs {
    configurations.unoJarPack.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
  }
}

packUnoJar.dependsOn build
packUnoJar.doLast {
    def licDir = file('licenses').parent
    ant.jar(update: true, destFile: file(unoJardest)) {
      fileset(dir: licDir) {
        include(name: 'licenses/**')
        include(name: 'NOTICE.txt')
        include(name: 'LICENSE.txt')
      }
    }
  }

task generateNotices() {
  doLast {
    def toConcatenate = fileTree(file('licenses')) {
      include '**/Apache-2.0/*/NOTICE.txt'
    }
    def header = new File("notice-header.txt")
    def output = new File("NOTICE.txt")
    output.write('') // truncate file
    output << header.text
    toConcatenate.each { f ->
      output << "\n\n-------------------------------------------------------------------------------\n"
      output << "       NOTICE for " + (file(f.parent).name)
      output << "\n-------------------------------------------------------------------------------\n"

      output << f.text
    }
  }
}

jacocoTestReport.dependsOn test

artifactoryPublish.dependsOn packUnoJar

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId 'jesterj-ingest'
      version project.version
      from components.java
      artifact source: file(unoJardest), classifier: "node"
    }
  }
}

/*

 Maven Publishing stuff to publish to central. This also allows you to publish
 to a local repository on your system byt setting the version to -LOCAL instead
 of -SNAPSHOT. Specifically:

  To test pom and artifact generation locally...

  1. Ensure GPG keyring in .gnupg dir
  2. Check that the value (above) for ext.
  3. Change version to remove -SNAPSHOT and add -LOCAL
  4. Run gradle uploadArchives
  5. observe archives uploaded to ext.uploadRepo (adjust location as needed)


  To release to central

  1. Ensure GPG keyring in .gnupg dir
  2. Ensure passwords for sonatype in gradle.properties
  3. Test the production of artifacts locally with -LOCAL (see above)
  4. No really, test it, and read everything...
  5. Seriously, don't skip #3!
  6. Change version to remove -SNAPSHOT
  7. Run gradle uploadRelease
  8. Hope to hell you didn't miss anything in step 3....
  9. you skipped #3? OMG you suck... *sigh*

 */

ext.isSnapshot = version.endsWith('-SNAPSHOT')
ext.isLocal = version.endsWith('-LOCAL')
ext.isRelease = !(isLocal || isSnapshot)

ext.releaseRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
ext.snapshotRepo = 'https://oss.sonatype.org/content/repositories/snapshots'
ext.testingRepo = 'file:///tmp/myRepo/'
ext.uploadRepo = isRelease ? releaseRepo : (isSnapshot ? snapshotRepo : testingRepo)


task uploadSnapshot(dependsOn: uploadArchives) {}
task uploadRelease(dependsOn: uploadArchives) {}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  archiveFileName = 'jesterj-ingest-'+project.version+'-sources.jar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
  archiveFileName = 'jesterj-ingest-'+project.version+'-javadoc.jar'
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

// A little idiot proofing...
task checkUploadDest {
  doLast {
    if (gradle.taskGraph.hasTask(':uploadRelease')) {
      if (isSnapshot) {
        ant.fail('Release should not have suffix of -SNAPSHOT')
      }
      if (isLocal) {
        ant.fail('Release should not have suffix of -LOCAL')
      }
    } else if (gradle.taskGraph.hasTask(':uploadSnapshot')) {
      if (!isSnapshot) {
        ant.fail('Snapshot should have suffix of SNAPSHOT')
      }
    } else {
      if (!isLocal) {
        ant.fail('This is not a local version, ' +
            'please use either uploadRelease or uploadSnapshot, or change the version suffix to -LOCAL')
      }
    }
  }
}

// Uncomment this to do sonatype uploads (fails on all other machines looking for gpg key otherwise
//
signing {
    required { !isLocalVersion && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}


ext.isLocalVersion = !version.endsWith("LOCAL")

//uploadArchives {
//  it.dependsOn checkUploadDest
//  repositories {
//    mavenDeployer {
//      beforeDeployment { deployment -> signing.signPom(deployment) }
//      repository(url: project.uploadRepo) {
//        authentication(userName: propOrDefault('sonatypeUsername','foo'), password: propOrDefault('sonatypePassword','foo'))
//      }
//      pom.project {
//        parent {
//          groupId 'org.sonatype.oss'
//          artifactId 'oss-parent'
//          //noinspection GroovyAssignabilityCheck
//          version '7'
//        }
//        artifactId 'jesterj-ingest'
//        name 'JesterJ Ingester'
//        description 'Document ingestion for search'
//        url 'https://github.com/nsoft/jesterj'
//        licenses {
//          license {
//            name 'The Apache Software License, Version 2.0'
//            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//            distribution 'repo'
//          }
//        }
//        scm {
//          connection 'scm:git:git@github.com:nsoft/jesterj.git'
//          developerConnection 'scm:git:git@github.com:nsoft/jesterj.git'
//          url 'git@github.com:nsoft/jesterj.git'
//        }
//        developers {
//          developer {
//            id 'nsoft'
//            name 'Patrick Heck'
//            email 'gus@needhamsoftware.com'
//          }
//        }
//      }
//      pom.withXml { root ->
//        def children = root.asNode().children()
//        def versionIndex = children.indexOf(children.find { it.name().localPart == 'version' })
//        // Stuff that sonatype wants... there may be a way to make these appear automatically but...
//        // http://issues.gradle.org/browse/GRADLE-1285
//        children.add(versionIndex + 1, new Node(null, 'packaging', 'jar'))
//      }
//    }
//  }
//}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'jesterj-ingest'
//      from components.java

      pom {
        name = 'My Library'
        description = 'A concise description of my library'
        url = 'http://www.example.com/library'
        properties = [
            myProp: "value",
            "prop.with.dots": "anotherValue"
        ]
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'johnd'
            name = 'John Doe'
            email = 'john.doe@example.com'
          }
        }
        scm {
          connection = 'scm:git:git://example.com/my-library.git'
          developerConnection = 'scm:git:ssh://example.com/my-library.git'
          url = 'http://example.com/my-library/'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = 'http://localhost:8081/repository/maven-releases'
      def snapshotsRepoUrl = 'http://localhost:8081/repository/maven-snapshots'
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      allowInsecureProtocol=true
      credentials {
        username "admin"
        password "admin123"
      }
    }
  }
}


javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

generateMetadataFileForMavenJavaPublication.dependsOn(packUnoJar)

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  Map<String, String> attrs = new LinkedHashMap<>();
  attrs.put('Implementation-Title', project.name)
  attrs.put('Implementation-Version', version)
  attrs.put('Build-Timestamp', getTimestamp())
  attrs.put('Build-Jdk', getJdk())
  attrs.put('Build-Tool', gradle.gradleVersion)
  return attrs
}

def getTimestamp() {
  def dt = new Date()
  def df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss', Locale.ENGLISH)
  df.format(dt)
}

def getJdk() {
  "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})"
}

def propOrDefault(String prop, String defaultVal) {
  return project.hasProperty(prop) ? project.getProperty(prop) : defaultVal
}
