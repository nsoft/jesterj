//file:noinspection VulnerableLibrariesLocal
import org.jesterj.licensereport.PreferredLicensesFilter

import java.text.SimpleDateFormat
import java.time.Instant

/*
 * Copyright 2013-2018 Needham Software LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
  }
}

plugins {
  id 'java-library'
  id 'idea'
  id 'jacoco'
  id 'signing'
//  id 'maven'
  id 'maven-publish'
  id 'com.palantir.git-version'
  id 'com.github.jk1.dependency-license-report' //version '2.9'  // version determined in buildSrc
  id 'com.needhamsoftware.unojar' version '1.1.0'
  id 'com.dorongold.task-tree' version '4.0.1'
}




idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  unoJarPack
  // under no circumstances shall we distribute these in our archives
  unoJarPack.exclude group: 'junit'               // test lib
  unoJarPack.exclude group: 'org.easymock'        // test lib
  // Conflicting licenses...
  unoJarPack.exclude group: 'org.jboss.logging'
  unoJarPack.exclude group: 'com.github.spotbugs'
  unoJarPack.exclude group: 'com.google.code.findbugs', module: 'annotations' // N.B. findbugs jsr305 is ok, thus module
  unoJarPack.exclude group: 'c3p0', module: 'c3p0'
  unoJarPack.exclude group: 'com.google.j2objc' // inconsistent dependency! mac vs linux
  unoJarPack.extendsFrom implementation
}

configurations.configureEach {
  resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
  resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
}

//////////////////////////

version = '2.0-SNAPSHOT'
group = 'org.jesterj'
ext.shortDesc = 'JesterJ Core API'
description = 'Library for writing JesterJ ingestion plans'

ext.archiveName = 'jesterj-ingest'

//////////////////////////


dependencies {
  implementation 'com.needhamsoftware.unojar:core:1.1.0'
  implementation 'io.github.classgraph:classgraph:4.8.147'
  api 'org.apache.tika:tika-core:2.4.1'
  implementation 'org.apache.tika:tika-parsers-standard-package:2.4.1'

  api 'org.apache.solr:solr-core:9.8.1'

  // until SOLR 9.1.1 (should be safe see https://issues.apache.org/jira/browse/SOLR-16568)
  api 'com.fasterxml.woodstox:woodstox-core:6.4.0'

  implementation 'com.google.guava:guava:31.1-jre'
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  // IDE checker reports CVE-2021-21290, CVE-2021-21295, CVE-2021-37137, CVE-2021-43797 in transitive deps.
  // The Cassandra devs have determined that these are not relevant to usage of cassandra
  // https://github.com/apache/cassandra/blob/c378874a9fa123891d1d75177d99dba5c4d18f9b/.build/dependency-check-suppressions.xml
  // Note: there are (as of now) no netty import statements, so we're not using any vulnerable code either.
  //noinspection VulnerableLibrariesLocal
  implementation ('org.apache.cassandra:cassandra-all:4.1.8') {  // note: C* 5 now out
    exclude group:'ch.qos.logback'
    exclude group: 'com.fasterxml.jackson.core'
    exclude group: 'com.fasterxml.jackson.dataformat'
    exclude group: 'com.fasterxml.jackson'
  }

  // Cassandra slow to upgrade this. 4.1.8 still on 2.13,
  // see https://github.com/apache/cassandra/blob/cassandra-4.1.8/build.xml#L594
  // overriding to keep dependabot happy.
  api 'com.fasterxml.jackson.core:jackson-core:2.15.4'
  api 'com.fasterxml.jackson.core:jackson-databind:2.15.4'
  api 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.15.4'

  // CVE-2021-24823 --> waiting for 4.15 to release.
  //noinspection VulnerableLibrariesLocal
  implementation 'com.datastax.oss:java-driver-core:4.14.1'
  implementation 'org.yaml:snakeyaml:1.33'
  api 'org.apache.velocity:velocity-engine-core:2.3'

  api 'org.apache.logging.log4j:log4j-core:2.21.0'

  implementation('com.needhamsoftware:easier-mock:2.0') {
    exclude group:'org.easymock'
    exclude group:'junit'
  }
  implementation('org.objenesis:objenesis:3.2')
  implementation 'com.offbytwo:docopt:0.6.0.20150202'
  implementation 'guru.nidi:graphviz-java:0.18.1'
  implementation 'com.fasterxml:aalto-xml:1.3.2'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.easymock:easymock:4.3'
  testImplementation 'org.hsqldb:hsqldb:2.6.1'
  testImplementation ('com.needhamsoftware:easier-mock:2.0') {
    exclude group:'org.easymock'
    exclude group:'junit'
  }
  testImplementation 'com.opencsv:opencsv:4.1'

  // this shouldn't be necessary but there's something dodgy going on with jacocoTestReport's classpath
  // using testImplementation so we don't package these...
  testImplementation (group: 'org.jacoco', name:'org.jacoco.report', version:'0.7.7.201606060606')
  testImplementation (group: 'org.jacoco', name:'org.jacoco.core', version:'0.7.7.201606060606')
  testImplementation 'org.apache.solr:solr-test-framework:9.8.0'
  implementation 'io.github.hakky54:ayza:10.0.0'
  implementation 'com.github.mizosoft.methanol:methanol:1.8.2'
}

compileJava {
  options.compilerArgs += ["--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED"]
}

javadoc {
  options.optionFiles << file('javadoc.options')
}

// these are just support classes for the Trie Tests swiped from commons/collections
// they don't actually have test methods which causes Junit to complain. Just don't run them.
test {
  maxHeapSize = "4g"
  //maxParallelForks = 6
  exclude '**/Abstract*.class', '**/BulkTest.class'
  forkEvery 1 // temp until we can get FTI tests moved into a separate target.
  systemProperty "java.security.egd", "file:/dev/./urandom"
  systemProperty "jj.log.dir", "build"
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }

  doFirst {
    jvmArgs += [
        '-Djesterj.build.start=' + String.valueOf(Instant.now().toEpochMilli()),
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
        '--add-opens', 'java.base/jdk.internal.util.jar=ALL-UNNAMED',
        '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED'
    ]
  }
}

tasks.register('quickTest', Test) {
  maxHeapSize = "4g"
  //maxParallelForks = 6
  exclude '**/Abstract*.class', '**/BulkTest.class', 'org/jesterj/ingest/indexing/**'
  forkEvery 1 // temp until we can get FTI tests moved into a separate target.
  systemProperty "java.security.egd", "file:/dev/./urandom"
  systemProperty "jj.log.dir", "build"
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }

  jvmArgs += [
      '-Djesterj.build.start=' + String.valueOf(Instant.now().toEpochMilli()),
      '--add-modules', 'ALL-MODULE-PATH',
      '--add-opens', 'java.base/java.lang.module=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.reflect=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.math=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.module=ALL-UNNAMED',
      '--add-opens', 'java.base/jdk.internal.util.jar=ALL-UNNAMED',
      '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED'
  ]
}

quickTest.group = 'verification'
quickTest.description = 'Run all tests except the FTI tests and other full integration tests that have long delays'

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

jar {
  archiveFileName = archiveName +'-'+project.version+'.jar'
  into("META-INF/maven/$project.group/$project.name") {
    from { generatePomFileForMavenJavaPublication }
    rename ".*", "pom.xml"
  }
  into("META-INF") {
    from "$projectDir/NOTICE.txt"
  }
  into("META-INF") {
    from "$projectDir/LICENSE.txt"
  }
}

unojar {
  archivesBaseName = archiveName
  archiveClassifier = "node"
  mainClass = 'org.jesterj.ingest.Main'
  manifestAttributes = [
      // exports/opens for cassandra
      'Add-Exports': 'java.base/jdk.internal.misc java.base/jdk.internal.ref java.base/sun.nio.ch' +
          ' java.management.rmi/com.sun.jmx.remote.internal.rmi java.rmi/sun.rmi.registry' +
          ' java.rmi/sun.rmi.server java.sql/java.sql',
      // this is not part of the jar standard, but I expect to support it in UnoJar
      'Add-Opens' : 'java.base/java.lang.module java.base/jdk.internal.loader java.base/jdk.internal.ref' +
          ' java.base/jdk.internal.reflect java.base/jdk.internal.math java.base/jdk.internal.module ' +
          ' java.base/jdk.internal.util.jar jdk.management/com.sun.management.internal'
  ]
}

def nodeFile = file("$buildDir/libs/" + tasks.getByName("packageUnoJar").getArchiveFileName())
packageUnoJar.dependsOn check
packageUnoJar.doLast {
  def licDir = file('licenses').parent

  ant.jar(update: true, destFile: nodeFile) {
      fileset(dir: licDir) {
        include(name: 'licenses/**')
        include(name: 'NOTICE.txt')
        include(name: 'LICENSE.txt')
      }
    }
  }

jacocoTestReport.dependsOn check

tasks.register('sourcesJar', Jar) {
  dependsOn classes
  //noinspection GroovyAccessibility
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
  archiveFileName = 'jesterj-ingest-' + project.version + '-sources.jar'
  into("META-INF") {
    from "$projectDir/NOTICE.txt"
  }
  into("META-INF") {
    from "$projectDir/LICENSE.txt"
  }
}

tasks.register('javadocJar', Jar) {
  dependsOn javadoc
  //noinspection GroovyAccessibility
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
  archiveFileName = 'jesterj-ingest-' + project.version + '-javadoc.jar'
  into("META-INF") {
    from "$projectDir/NOTICE.txt"
  }
  into("META-INF") {
    from "$projectDir/LICENSE.txt"
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

// A little idiot proofing...
tasks.register('checkUploadDest') {
  doLast {
    if (gradle.taskGraph.hasTask(':uploadRelease')) {
      if (isSnapshot) {
        ant.fail('Release should not have suffix of -SNAPSHOT')
      }
      if (isLocal) {
        ant.fail('Release should not have suffix of -LOCAL')
      }
    } else if (gradle.taskGraph.hasTask(':uploadSnapshot')) {
      if (!isSnapshot) {
        ant.fail('Snapshot should have suffix of SNAPSHOT')
      }
    } else {
      if (!isLocal) {
        ant.fail('This is not a local version, ' +
            'please use either uploadRelease or uploadSnapshot, or change the version suffix to -LOCAL')
      }
    }
  }
}


javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  def gitDetails = versionDetails()
  Map<String, String> attrs = new LinkedHashMap<>()
  attrs.put('Implementation-Title', project.name)
  attrs.put('Implementation-Version', version)
  attrs.put('Build-Revision', gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'))
  attrs.put('Created-By', "Gradle ${gradle.gradleVersion}")
  attrs.put('Build-Jdk', getJdk())
  attrs.put('Build-OS', "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
  return attrs
}

static def getJdk() {
  "${System.getProperty('java.version')} (${System.getProperty('java.vm.vendor')} ${System.getProperty('java.vm.version')})"
}

apply from:  file('./gradle/licenseMgmt.gradle')
apply from:  file('./gradle/publishing.gradle')

generateMetadataFileForMavenJavaPublication.dependsOn(packageUnoJar)